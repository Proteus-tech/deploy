#!/usr/bin/env python

import sys
import os

def create_file(basename):
    raw_context = '''
from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand

from buildbot_config.settings import BRANCH, PROJECT_NAME, PROJECT_CODE_URL

nickname = '[basename]'
name = 'slave-%s' % nickname
builder_name = 'builder-%s' % nickname
# slave
slave = BuildSlave(name, "%spassword" % name)
# builder
factory = BuildFactory()
factory.addStep(ShellCommand(command="git pull origin develop", workdir=PROJECT_CODE_URL))
# Pip install and update to environment which run this buildbot
factory.addStep(ShellCommand(command=["pip", "install", "--upgrade", "--requirement=setup/requirements.txt"],workdir=PROJECT_CODE_URL))
factory.addStep(ShellCommand(command=["pip", "freeze"], workdir=PROJECT_CODE_URL))
factory.addStep(ShellCommand(command=["/bin/bash","reset_db"], workdir=PROJECT_CODE_URL))
factory.addStep(ShellCommand(command=["/bin/bash","runtests"], workdir=PROJECT_CODE_URL))

builder = BuilderConfig(name=builder_name
            , slavenames=[name]
            , factory=factory)
'''
    context = raw_context.replace('[basename]',basename)
    slave_file_path = 'buildbot_config/slaves/%s'
    pg_slave_file_path = slave_file_path % 'pg_slave.py'
    if os.path.exists(pg_slave_file_path):
        fobj = open(pg_slave_file_path,'w')
        fobj.write(context)
        fobj.close()
    else:
        print '%s not found' % (slave_file_path)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        basename = 'pg'
    else:
        basename = sys.argv[1]
    create_file(basename)
