#!/usr/bin/env python
from startproject import (create_python_package, pythonify, unpythonify, 
    create_project, chmod_scripts, cleanup)

import os, project_template, shutil, sys

def move_files_into_build(template_path):
    """
    When Django is starting project, file *.py which contains 
    {{ project_name }} would be rendered. In order to make others
    scripts such as runtests also be rendered, we need to create
    a temporary `build` package to trick django to render them.
    """
    build_root = os.path.join(template_path, 'build')

    if os.path.exists(build_root):
        return

    create_python_package(build_root)

    build_buildbot = os.path.join(template_path, 'build', 'buildbot')
    create_python_package(build_buildbot)

    pythonify(template_path, 'runtests', [], ['build']) 
    pythonify(template_path, 'master.cfg', ['buildbot'], ['build', 'buildbot']) 

def move_files_out_of_build(project_dir):
    unpythonify(project_dir, 'runtests', ['build'], [])
    unpythonify(project_dir, 'master.cfg', ['build', 'buildbot'], ['buildbot'])

if __name__ == '__main__':
    if len(sys.argv) < 2:
        msg = '''[Error, Bad input] please specify project_name. 

        Usage: startproject <project_name>'''
        print msg
        sys.exit(1)
    template_path = project_template.__path__[0]
    move_files_into_build(template_path)
    print 'creating project %s' % sys.argv[1]
    project_name = sys.argv[1]
    create_project(project_name, template_path)
    move_files_out_of_build(project_name)
    print 'chmod scripts'
    chmod_scripts(project_name)
    print 'cleanup..'
    cleanup(project_name)
    print 'success!'
    sys.exit(0)

